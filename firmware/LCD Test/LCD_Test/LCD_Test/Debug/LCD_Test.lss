
LCD_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000136  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000018a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000018a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000801  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000642  00000000  00000000  00000a31  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000324  00000000  00000000  00001073  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001398  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000036d  00000000  00000000  000013ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000116  00000000  00000000  00001759  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000186f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 87 00 	call	0x10e	; 0x10e <main>
  64:	0c 94 99 00 	jmp	0x132	; 0x132 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <write_portc_instruction>:

#include <avr/io.h>
#include <util/delay.h>

void write_portc_instruction(uint8_t data) {
	PORTC = (data & 0xF0) | 0x04; // Set MSN data with enable clk
  6c:	98 2f       	mov	r25, r24
  6e:	90 7f       	andi	r25, 0xF0	; 240
  70:	29 2f       	mov	r18, r25
  72:	24 60       	ori	r18, 0x04	; 4
  74:	25 bb       	out	0x15, r18	; 21
	DDRC = 0xFF; // Enable output
  76:	2f ef       	ldi	r18, 0xFF	; 255
  78:	24 bb       	out	0x14, r18	; 20
	PORTC = (data & 0xF0) | 0x00; // Turn off enable clk with data
  7a:	95 bb       	out	0x15, r25	; 21
	DDRC = 0x00; // Disable output
  7c:	14 ba       	out	0x14, r1	; 20
	
	PORTC = ((data & 0x0F) << 4) | 0x04; // Set LSN data with enable clk
  7e:	30 e1       	ldi	r19, 0x10	; 16
  80:	83 9f       	mul	r24, r19
  82:	c0 01       	movw	r24, r0
  84:	11 24       	eor	r1, r1
  86:	98 2f       	mov	r25, r24
  88:	94 60       	ori	r25, 0x04	; 4
  8a:	95 bb       	out	0x15, r25	; 21
	DDRC = 0xFF; // Enable output
  8c:	24 bb       	out	0x14, r18	; 20
	PORTC = ((data & 0x0F) << 4) | 0x00; // Turn off enable clk with data
  8e:	85 bb       	out	0x15, r24	; 21
	DDRC = 0x00;  // Disable output
  90:	14 ba       	out	0x14, r1	; 20
	PORTC = 0x00; // Wipe data on PORTC
  92:	15 ba       	out	0x15, r1	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  94:	85 e8       	ldi	r24, 0x85	; 133
  96:	8a 95       	dec	r24
  98:	f1 f7       	brne	.-4      	; 0x96 <write_portc_instruction+0x2a>
  9a:	00 00       	nop
  9c:	08 95       	ret

0000009e <write_portc_data>:
	
	_delay_us(50);
}

void write_portc_data(uint8_t data) {
	PORTC = (data & 0xF0) | 0x0C; // Set MSN data with enable clk
  9e:	98 2f       	mov	r25, r24
  a0:	90 7f       	andi	r25, 0xF0	; 240
  a2:	29 2f       	mov	r18, r25
  a4:	2c 60       	ori	r18, 0x0C	; 12
  a6:	25 bb       	out	0x15, r18	; 21
	DDRC = 0xFF; // Enable output
  a8:	2f ef       	ldi	r18, 0xFF	; 255
  aa:	24 bb       	out	0x14, r18	; 20
	PORTC = (data & 0xF0) | 0x08; // Turn off enable clk with data
  ac:	98 60       	ori	r25, 0x08	; 8
  ae:	95 bb       	out	0x15, r25	; 21
	DDRC = 0x00; // Disable output
  b0:	14 ba       	out	0x14, r1	; 20
	
	PORTC = ((data & 0x0F) << 4) | 0x0C; // Set LSN data with enable clk
  b2:	30 e1       	ldi	r19, 0x10	; 16
  b4:	83 9f       	mul	r24, r19
  b6:	c0 01       	movw	r24, r0
  b8:	11 24       	eor	r1, r1
  ba:	98 2f       	mov	r25, r24
  bc:	9c 60       	ori	r25, 0x0C	; 12
  be:	95 bb       	out	0x15, r25	; 21
	DDRC = 0xFF; // Enable output
  c0:	24 bb       	out	0x14, r18	; 20
	PORTC = ((data & 0x0F) << 4) | 0x08; // Turn off enable clk with data
  c2:	88 60       	ori	r24, 0x08	; 8
  c4:	85 bb       	out	0x15, r24	; 21
	DDRC = 0x00;  // Disable output
  c6:	14 ba       	out	0x14, r1	; 20
	PORTC = 0x00; // Wipe data on PORTC
  c8:	15 ba       	out	0x15, r1	; 21
  ca:	85 e8       	ldi	r24, 0x85	; 133
  cc:	8a 95       	dec	r24
  ce:	f1 f7       	brne	.-4      	; 0xcc <write_portc_data+0x2e>
  d0:	00 00       	nop
  d2:	08 95       	ret

000000d4 <init_LCD>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	2f e7       	ldi	r18, 0x7F	; 127
  d6:	88 e3       	ldi	r24, 0x38	; 56
  d8:	91 e0       	ldi	r25, 0x01	; 1
  da:	21 50       	subi	r18, 0x01	; 1
  dc:	80 40       	sbci	r24, 0x00	; 0
  de:	90 40       	sbci	r25, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <init_LCD+0x6>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <init_LCD+0x10>
  e4:	00 00       	nop
}

void init_LCD() {
	_delay_ms(50);
	
	PORTC = 0x24; // Set data with enable clk
  e6:	84 e2       	ldi	r24, 0x24	; 36
  e8:	85 bb       	out	0x15, r24	; 21
	DDRC = 0xFF; // Enable output
  ea:	8f ef       	ldi	r24, 0xFF	; 255
  ec:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x20; // Turn off enable clk with data
  ee:	80 e2       	ldi	r24, 0x20	; 32
  f0:	85 bb       	out	0x15, r24	; 21
	DDRC = 0x00; // Disable output
  f2:	14 ba       	out	0x14, r1	; 20
	
	write_portc_instruction(0x28);
  f4:	88 e2       	ldi	r24, 0x28	; 40
  f6:	0e 94 36 00 	call	0x6c	; 0x6c <write_portc_instruction>
	
	write_portc_instruction(0x0C);
  fa:	8c e0       	ldi	r24, 0x0C	; 12
  fc:	0e 94 36 00 	call	0x6c	; 0x6c <write_portc_instruction>
	
	write_portc_instruction(0x01);
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	0e 94 36 00 	call	0x6c	; 0x6c <write_portc_instruction>
	
	write_portc_instruction(0x00);
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	0e 94 36 00 	call	0x6c	; 0x6c <write_portc_instruction>
 10c:	08 95       	ret

0000010e <main>:
}

int main(void)
{
	init_LCD();
 10e:	0e 94 6a 00 	call	0xd4	; 0xd4 <init_LCD>
    /* Replace with your application code */
    // _delay_ms(50);
	
	write_portc_data(0x41);
 112:	81 e4       	ldi	r24, 0x41	; 65
 114:	0e 94 4f 00 	call	0x9e	; 0x9e <write_portc_data>
	write_portc_data(0x41);
 118:	81 e4       	ldi	r24, 0x41	; 65
 11a:	0e 94 4f 00 	call	0x9e	; 0x9e <write_portc_data>
	write_portc_data(0x41);
 11e:	81 e4       	ldi	r24, 0x41	; 65
 120:	0e 94 4f 00 	call	0x9e	; 0x9e <write_portc_data>
	write_portc_data(0x41);
 124:	81 e4       	ldi	r24, 0x41	; 65
 126:	0e 94 4f 00 	call	0x9e	; 0x9e <write_portc_data>
	write_portc_data(0x41);
 12a:	81 e4       	ldi	r24, 0x41	; 65
 12c:	0e 94 4f 00 	call	0x9e	; 0x9e <write_portc_data>
 130:	ff cf       	rjmp	.-2      	; 0x130 <main+0x22>

00000132 <_exit>:
 132:	f8 94       	cli

00000134 <__stop_program>:
 134:	ff cf       	rjmp	.-2      	; 0x134 <__stop_program>
